{"ast":null,"code":"var _jsxFileName = \"/Users/gilbertlowrey/Desktop/api-practice/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\"https://swapi.dev/api/films/\");\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n      const data = await response.json();\n\n      //the following transforms the information from the api to make it fit into my app names\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Found no movies.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 17\n  }, this);\n  if (movies.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(MoviesList, {\n      movies: movies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 15\n    }, this);\n  }\n  if (error) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 15\n    }, this);\n  }\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"The Force will be with you shortly...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 15\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchMoviesHandler,\n        children: \"Fetch Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"/djrXmupudGJZ4TEuxAjJK8qFwI=\");\n_c = App;\nexport default App;\n\n/*\nThis is an example of how to send HTP requests to a backend\nfetch starts the process, it can have a second argument, but doesn't now. \nFetch is a promise, and can't act right away, because the rest of my app needs data to \ndo it's job. That's where then() comes in. then() takes my response and reads it as json \nsince that's how this particular API was written. Once the data is read as json, another promise, \nthen I transform it to fit with how my app is written. I could have changed my app to match \nthe API, but this is good practice. At the end of my transformation, I set the movies using\nsetMovies, and that is why useState is an empty array.  THis was originally built with a then() chain\nseen below\n\n  const fetchMoviesHandler = () => {\n    fetch(\"https://swapi.dev/api/films/\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        //the following transforms the information from the api to make it fit into my app names\n        const transformedMovies = data.results.map((movieData) => {\n          return {\n            id: movieData.episode_id,\n            title: movieData.title,\n            openingText: movieData.opening_crawl,\n            releaseDate: movieData.release_date,\n          };\n        });\n        setMovies(transformedMovies);\n      });\n  };\n\n  but I can also use async. \n*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","MoviesList","jsxDEV","_jsxDEV","App","_s","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","ok","Error","data","json","transformedMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","message","content","children","fileName","_jsxFileName","lineNumber","columnNumber","length","Fragment","onClick","_c","$RefreshReg$"],"sources":["/Users/gilbertlowrey/Desktop/api-practice/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\"https://swapi.dev/api/films/\");\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n\n      //the following transforms the information from the api to make it fit into my app names\n      const transformedMovies = data.results.map((movieData) => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date,\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  let content = <p>Found no movies.</p>;\n\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>The Force will be with you shortly...</p>;\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>{content}</section>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n\n/*\nThis is an example of how to send HTP requests to a backend\nfetch starts the process, it can have a second argument, but doesn't now. \nFetch is a promise, and can't act right away, because the rest of my app needs data to \ndo it's job. That's where then() comes in. then() takes my response and reads it as json \nsince that's how this particular API was written. Once the data is read as json, another promise, \nthen I transform it to fit with how my app is written. I could have changed my app to match \nthe API, but this is good practice. At the end of my transformation, I set the movies using\nsetMovies, and that is why useState is an empty array.  THis was originally built with a then() chain\nseen below\n\n  const fetchMoviesHandler = () => {\n    fetch(\"https://swapi.dev/api/films/\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        //the following transforms the information from the api to make it fit into my app names\n        const transformedMovies = data.results.map((movieData) => {\n          return {\n            id: movieData.episode_id,\n            title: movieData.title,\n            openingText: movieData.opening_crawl,\n            releaseDate: movieData.release_date,\n          };\n        });\n        setMovies(transformedMovies);\n      });\n  };\n\n  but I can also use async. \n*/\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}